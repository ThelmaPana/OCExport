---
title: "Predicting POC export from plankton diversity"
subtitle: "Calipsocean meeting"
author: "Thelma Panaïotis"
date: "03/05/2024"
date-format: "DD/MM/YYYY"
format: 
  revealjs:
    theme: [simple, custom.scss]
    #footer: ""
    logo: images/noc_small.png
    slide-number: c
    auto-stretch: false
    embed-resources: true
editor: visual
execute: 
  cache: true
  warning: false
---

```{r set_up}
#| output: false
#| echo: false
#| cache: false
source(here::here("utils.R"))

# Raw datas
load(here("data/00.carbon_data.Rdata"))
load(here("data/01.all_env.Rdata"))
load(here("data/03.uvp_profiles.Rdata"))
load(here("data/04.all_data.Rdata"))
rm(coast)

# Model outputs
load(here("data/06.all_preds_poc_from_env.Rdata"))

```

# Aim

## Environment, plankton and carbon

::: {.absolute top="5"}
```{dot diagram}
digraph {
  rankdir="LR"
  "env"[color="#ffe50a"]
  "plankton*"[color="#5ed496"]
  "carbon export**"[color="#00b5ff"]
  "env" -> "plankton*"
  "env" -> "carbon export**"
  "plankton*" -> "carbon export**"
}
```
:::

::: {.absolute .fragment top="400"}
Can we improve the representation of zooplankton diversity in ESM?
:::

::: aside
[\*plankton = zooplankton]{style="color: gray;font-size: 20px;"}

[\*\*Here, we will use POC as a proxy for carbon export.]{style="color: gray;font-size: 20px;"}
:::

## Questions

::: {.fragment .fade-in-then-semi-out}
-   Can [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"} be predicted from [env]{style="color: black;background-color: #ffe50a;border-radius: 10px"}?
:::

::: {.fragment .fade-in-then-semi-out}
-   Can [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"} be predicted from [plankton]{style="color: black;background-color: #5ed496;border-radius: 10px"}?
:::

::: {.fragment .fade-in-then-semi-out}
-   Can [plankton]{style="color: black;background-color: #5ed496;border-radius: 10px"} be predicted from [env]{style="color: black;background-color: #ffe50a;border-radius: 10px"}?
:::


# Data

## POC

::: panel-tabset
## Ref

[![](images/wang_2023.png){width="80%" fig-align="center"}](https://www.nature.com/articles/s41586-023-06772-4)

## Map

POC export at 1000 m

```{r poc_map}
ggmap(df = df_c, var = "poc", type = "raster")
```
:::

## Environment

As in [Wang et al., 2023](https://www.nature.com/articles/s41586-023-06772-4).

Yearly climatologies from GLODAPv2.

::: {layout-ncol="2"}
<div>

-   temperature

-   silicate

-   phosphate

-   oxygen

</div>

<div>

-   NPP

-   alkalinity

-   DIC

-   [DOC]{style="color:gray;"}

</div>
:::

## Plankton

UVP5 dataset: `r nrow(profiles)` profiles

```{r uvp_map}
ggplot(profiles, aes(x = lon, y = lat)) +
  geom_polygon(data = world, aes(group = group), fill = "gray") +
  geom_point(size = 0.5) +
  coord_quickmap(expand = FALSE) +
  theme_minimal()
```

## Plankton - Taxonomy

::: panel-tabset
## Variables

-   taxonomic richness

-   taxonomic diversity

-   taxonomic evenness

## Map

```{r map_ta_ric}
ggmap(profiles, var = "ta_ric_1", type = "point") + labs(colour = "Taxo.\nRichness")
```
:::

## Plankton - Morphology

::: panel-tabset
### Variables

::: {.fragment .semi-fade-out fragment-index="1"}
Function diversity metrics [(Magneville et al. 2022)](https://nsojournals.onlinelibrary.wiley.com/doi/10.1111/ecog.05904)
:::

::: {.fragment .fade-in fragment-index="1"}
→ morphological diversity metrics [(Beck et al., 2023)](https://royalsocietypublishing.org/doi/suppl/10.1098/rspb.2023.2109)

-   morphological richness

-   morphological divergence

-   morphological evenness

-   …
:::

### Map

```{r map_mo_ric}
ggmap(profiles, var = "mo_ric", type = "point") + labs(colour = "Morpho\nRichness")
```
:::

## Plankton - Trophic Status [(not yet)]{style="color:gray;"}

### The problem(s)

-   low taxonomic resolution of the UVP5 dataset

::: {.fragment .fade-in}
-   trophic status of a chaetognath
:::

::: {.fragment .fade-in}
-   trophic status of a copepod?
:::

## Plankton - Trophic Status [(not yet)]{style="color:gray;"}

### The ideas

::: {.fragment .fade-in}
-   [by size?]{.fragment .strike}
:::

::: {.fragment .fade-in}
-   by taxa-region matches?

    ::: {.fragment .fade-in}
    -   [Matthews and Ohman, 2023](https://onlinelibrary.wiley.com/doi/abs/10.1002/lno.12450)

    -   [Benedetti et al., 2023](https://onlinelibrary.wiley.com/doi/abs/10.1111/jbi.14512) (copepods only)
    :::
:::

::: {.fragment .fade-in}
-   other dataset? [↑ taxonomic resolution but ↓ coverage.]{.fragment}
:::

::: {.fragment .fade-in}
-   plankton NASS to infer trophic structure?
:::

## Final dataset

::: r-stack
::: {.fragment .fade-out fragment-index="1"}
::: {style="color: white;"}
Placeholder
:::

```{r poc_ras_uvp}
ggmap(df = df_c, var = "poc", type = "raster") +
  geom_point(data = profiles, aes(x = lon, y = lat), size = 0.5)
```
:::

::: {.fragment .fade-in-then-out fragment-index="1"}
::: {style="color: white;"}
Placeholder
:::

```{r poc_ras_uvp_round}
ggmap(df = df_c, var = "poc", type = "raster") +
  geom_point(data = df, aes(x = lon, y = lat), size = 0.5)
```
:::

::: {.fragment .fade-in}
`r nrow(df)` data points

```{r poc_pt_uvp_round}
ggmap(df, var = "poc", type = "point")
```
:::
:::

## Final dataset -- Splits

Learning\* VS test set, stratified by [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"}.

::: r-stack
::: fragment
```{r split_map}
all_preds %>% 
  select(split, lon, lat) %>% 
  mutate(split = ifelse(split == "train", "learn", "test")) %>% 
  ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_point(aes(x = lon, y = lat, colour = split), size = 0.5) +
  scale_colour_manual(values = c("learn" = "#004c96", "test" = "#ff8700")) +
  coord_quickmap(expand = FALSE)
```

::: aside
[\*learning = training + validation, cross-validated]{style="color: gray;font-size: 20px;"}
:::
:::

::: {.fragment .fade-in}
::: goals
::: goals-header
:::

::: goals-container
TODO: Account for spatial & temporal autocorrelation
:::
:::
:::
:::

# ML Model

## (Multivariate) boosted trees

Response variable:

-   uni- or multivariate

-   \~normally distributed → `log(POC)`

Flexibility for predictors, handles interactions.

Complex & non-linear relationships.

Easy interpretation & implementation.

# Results

## [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"} from [env]{style="color: black;background-color: #ffe50a;border-radius: 10px"}

[`POC ~ temperature + silicate + phosphate + oxygen + NPP + alkalinity + DIC`]{style="font-size: 50%;"}

::: columns
::: {.column width="70%"}
::: {.fragment .fade-in}
```{r poc_from_env}
all_preds %>% 
  filter(split == "test") %>% 
  select(poc, poc_log, .pred_logged, .pred) %>% 
  ggplot() +
  geom_point(aes(x = poc, y = .pred)) +
  geom_abline(slope = 1, intercept = 0, color = "#ff82ff") +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "POC", y = "Predicted POC")
```
:::
:::

::: {.column width="30%"}
::: {.fragment .fade-in}
```{r poc_from_env_rsquare}
rsquare <- all_preds %>% filter(split == "test") %>% 
  rsq(truth = poc_log, estimate = .pred_logged)

```

R² = `r percent(rsquare$.estimate, accuracy = 0.1)`

::: {.callout-tip icon="false" appearance="simple"}
Good prediction!
:::
:::
:::
:::

::: aside
[Performances computed on **test** set.]{style="color: gray;font-size: 20px;"}
:::

## [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"} from [plankton]{style="color: black;background-color: #5ed496;border-radius: 10px"}

`POC ~ all plankton metrics`

::: columns
::: {.column width="70%"}
::: {.fragment .fade-in}
```{r poc_from_plankton}
load(here("data/07.all_preds_poc_from_plankton.Rdata"))

all_preds %>% 
  filter(split == "test") %>% 
  select(poc, poc_log, .pred_logged, .pred) %>% 
  ggplot() +
  geom_point(aes(x = poc, y = .pred)) +
  geom_abline(slope = 1, intercept = 0, color = "#ff82ff") +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "POC", y = "Predicted POC")
```
:::
:::

::: {.column width="30%"}
::: {.fragment .fade-in}
```{r poc_from_plankton_rsquare}
rsquare <- all_preds %>% filter(split == "test") %>% 
  rsq(truth = poc_log, estimate = .pred_logged)

```

R² = `r percent(rsquare$.estimate, accuracy = 0.1)`

::: {.callout-tip icon="false" appearance="simple"}
OK prediction!
:::

::: {.fragment .fade-in}
Best predictors:

-   [ta. evenness]{style="font-size: 30px;"}

-   [ta. diversity]{style="font-size: 30px;"}

-   [mo. richness]{style="font-size: 30px;"}
:::
:::
:::
:::

::: aside
[Performances computed on **test** set.]{style="color: gray;font-size: 20px;"}
:::

## [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"} from [plankton]{style="color: black;background-color: #5ed496;border-radius: 10px"} best predictors

`POC ~ ta_ric_3 + ta_mast + mo_ric`

::: columns
::: {.column width="70%"}
::: {.fragment .fade-in}
```{r poc_from_plankton_best}
load(here("data/08.all_preds_poc_from_plankton_best.Rdata"))

all_preds %>% 
  filter(split == "test") %>% 
  select(poc, poc_log, .pred_logged, .pred) %>% 
  ggplot() +
  geom_point(aes(x = poc, y = .pred)) +
  geom_abline(slope = 1, intercept = 0, color = "#ff82ff") +
  scale_x_log10() +
  scale_y_log10() +
  labs(x = "POC", y = "Predicted POC")
```
:::
:::

::: {.column width="30%"}
::: {.fragment .fade-in}
```{r poc_from_plankton_best_rsquare}
rsquare <- all_preds %>% filter(split == "test") %>% 
  rsq(truth = poc_log, estimate = .pred_logged)
rsquare_conc <- rsquare

```

R² = `r percent(rsquare$.estimate, accuracy = 0.1)`

::: {.callout-tip icon="false" appearance="simple"}
OK prediction!
:::
:::
:::
:::

::: aside
[Performances computed on **test** set.]{style="color: gray;font-size: 20px;"}
:::

## [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"} from [plankton]{style="color: black;background-color: #5ed496;border-radius: 10px"} best predictors

`POC ~ ta_ric_3 + ta_mast + mo_ric`

```{r poc_from_plankton_best_var_imp_warn}
#| fig-height: 7
#| include: false
# This chunk does not generate plot, just to get rid of the xgboost warning
plot_pdp(xgb_explain, vars_pdp[1]) + theme(text = element_text(size = 20))
```

::: r-stack
::: columns
::: {.column width="50%"}

```{r poc_from_plankton_best_var_imp_1}
#| fig-height: 7
#| warning: false
plot_pdp(xgb_explain, vars_pdp[1]) + theme(text = element_text(size = 20))
```
:::

::: {.column width="50%"}
```{r poc_from_plankton_best_var_imp_2}
#| fig-height: 7
plot_pdp(xgb_explain, vars_pdp[2]) + theme(text = element_text(size = 20))
```
:::
:::

::: {.fragment .fade-in .absolute bottom=80}
POC response to plankton descriptors.
:::

::: {.fragment .fade-in}
::: goals
::: goals-header
:::

::: goals-container
[TODO: Merge both descriptors of taxonomic richness into one.]{style="font-size: 90%;"}
:::
:::
:::
:::


## [plankton]{style="color: black;background-color: #5ed496;border-radius: 10px"} best predictors from [env]{style="color: black;background-color: #ffe50a;border-radius: 10px"}

[`ta_ric_3 + ta_mast + mo_ric ~ temperature + silicate + phosphate + oxygen + NPP + alkalinity + DIC`]{style="font-size: 50%;"}

::: columns
::: {.column width="70%"}
::: {.fragment .fade-in}
```{r plankton_from_env}
load(here("data/10.all_preds_plankton_best_from_env.Rdata"))

all_preds %>% 
  filter(split == "test") %>% 
  select(-contains("resid")) %>% 
  select(lon, lat, datetime, contains("_")) %>% 
  pivot_longer(contains("_")) %>% 
  mutate(
    type = ifelse(str_detect(name, "pred"), "pred", "truth"),
    name = str_remove_all(name, "pred_")
    ) %>% 
  pivot_wider(names_from = type, values_from = value) %>% 
  ggplot() +
  geom_point(aes(x = truth, y = pred)) +
    geom_abline(slope = 1, intercept = 0, color = "#ff82ff") +
  facet_wrap(~name, scales = "free")
```
:::
:::

::: {.column width="30%"}
::: {.fragment .fade-in}
```{r extract}
Y_test <- all_preds %>% 
  filter(split == "test") %>% 
  select(c("ta_ric_3", "mo_ric", "ta_mast"))

Y_test_pred <- all_preds %>% 
  filter(split == "test") %>% 
  select(contains("pred"))
```

```{python mult_rsq}
#| cache: false
from sklearn import metrics
mult_rsquare = metrics.r2_score(r.Y_test, r.Y_test_pred)
```

```{r mult_rsq_r}
#| cache: false
mult_rsquare <- py$mult_rsquare
```

Mult. R² = `r percent(mult_rsquare, accuracy = 0.1)`

::: {.callout-tip icon="false" appearance="simple"}
OK prediction!
:::
:::
:::
:::

::: aside
[Performances computed on **test** set.]{style="color: gray;font-size: 20px;"}
:::


# Conclusion

## Conclusion

::: {.fragment .fade-in}
-   Can [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"} be predicted from [env]{style="color: black;background-color: #ffe50a;border-radius: 10px"}? [→ **Yes**]{.fragment}
:::

::: {.fragment .fade-in}
-   Can [POC]{style="color: black;background-color: #00b5ff;border-radius: 10px"} be predicted from [plankton]{style="color: black;background-color: #5ed496;border-radius: 10px"}? [→ **Yes**]{.fragment}
:::

::: {.fragment .fade-in}
-   Can [plankton]{style="color: black;background-color: #5ed496;border-radius: 10px"} be predicted from [env]{style="color: black;background-color: #ffe50a;border-radius: 10px"}? [→ **Yes**]{.fragment}
:::


## Take-home messages

-   We can predict `r percent(rsquare_conc$.estimate, accuracy = 0.1)` of POC variance using only 3 descriptors of the zooplankton community.

::: {.fragment .fade-in}
-   We know how POC reponds to variations in these plankton descriptors.
:::

::: {.fragment .fade-in}
-   These plankton descriptors can be predicted from the environment.
:::
