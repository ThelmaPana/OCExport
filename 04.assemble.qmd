---
title: "Assemble POC, environmental and UVP data"
author: "Thelma Panaïotis"
format:
  html:
    toc: true
    embed-resources: true
editor: visual
execute:
  cache: true
  warning: false
---

## Load data

```{r load_data}
#| label: load data
#| output: false
source("utils.R")

load("data/00.carbon_data.Rdata")
load("data/01.all_env.Rdata")
load("data/03.uvp_profiles.Rdata")
rm(coast)
```

## Round coordinates of env and UVP data to match carbon data

Carbon data is given on a 2°×2° grid, so we need to round env and UVP coordinates to match the same grid. Carbon longitudes are odd so we need to floor longitude with `precision = 2` and then add 1 to the result. Carbon latitudes are even so we can just round with `precision = 2`.

### Env data

```{r round_env_coord}
env <- env %>%
  arrange(lon, lat) %>%
  mutate(
    # floor longitude and add 1 because carbon longitudes are odd
    lon = roundp(lon, precision = 2, f = floor) + 1,
    # round latitude because carbon latitudes are even
    lat = roundp(lat, precision = 2, f = round)
  ) %>%
  # Average all values on carbon pixels
  group_by(lon, lat) %>%
  summarise_all(mean, na.rm = TRUE) %>%
  ungroup()
```

### UVP data

We can start by plotting a map of UVP profiles.

```{r map_uvp}
#| fig-column: body-outset
#| out-width: 100%
profiles %>% 
  ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "gray") +
  geom_point(aes(x = lon, y = lat), alpha = 0.5, size = 0.5) +
  coord_quickmap()
```

Now let’s round the coordinates and replot the map. We also need to average UVP data on our new grid, but before that let’s also compute the number of UVP profiles per carbon pixel.

```{r round_uvp_coord}
#| fig-column: body-outset
#| out-width: 100%
profiles <- profiles %>%
  # Drop profile identification
  select(-profile_id) %>% 
  mutate(
    # floor longitude and add 1 because carbon longitudes are odd
    lon = roundp(lon, precision = 2, f = floor) + 1,
    # round latitude because carbon latitudes are even
    lat = roundp(lat, precision = 2, f = round)
  )

n_profiles <- profiles %>% count(lon, lat)

profiles <- profiles %>% 
  # Average all values on carbon pixels
  group_by(lon, lat) %>%
  summarise_all(mean, na.rm = TRUE) %>%
  ungroup()

profiles %>% 
  ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "gray") +
  geom_point(aes(x = lon, y = lat), alpha = 0.5, size = 0.5) +
  coord_quickmap()
```

UVP profiles are now aligned on the 2°×2° grid. We can also plot the number of UVP profiles per pixel.

```{r map_uvp_gridded}
#| fig-column: body-outset
#| out-width: 100%
n_profiles %>% 
  ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "gray") +
  geom_point(aes(x = lon, y = lat, alpha = n), size = 0.5) + 
  coord_quickmap()
```

We can notice a strong sampling in the California current and in the Peruvian upwelling.

Let’s have a quick look at Shannon diversity on this new grid.

```{r map_ta_ric}
#| fig-column: body-outset
#| out-width: 100%
ggmap(profiles, "ta_ric_1", type = "point")
```

## Assemble env, UVP and carbon data

Since all three datasets use the same round coordinates, we can join them together. As a result, we will only get env and carbon data where UVP data is available.

```{r assemple}
df <- profiles %>%
  left_join(env,  by = join_by(lon, lat)) %>%
  left_join(df_c, by = join_by(lon, lat)) %>% 
  select(lon, lat, everything())
```

Our dataset contains `r nrow(df)` points.

Now, we can plot POC data at locations of UVP profiles.

```{r map_poc_uvp}
#| fig-column: body-outset
#| out-width: 100%
ggmap(df, "poc", type = "point") + scale_colour_cmocean(name = "matter") # manually add scale to show NA values
```

Or temperature.

```{r map_temp_uvp}
#| fig-column: body-outset
#| out-width: 100%
ggmap(df, "temperature", type = "point") + scale_colour_cmocean(name = "thermal") # manually add scale to show NA values
```

In both cases, we notice that some POC and temperature data is not available at some UVP locations.

```{r summary}
summary(df)
```

Let’s get rid of these points.

```{r drop_na}
df <- df %>% drop_na()
```

We still have `r nrow(df)` points in our dataset.

Let’s redraw our POC map.

```{r map_poc_uvp_no_na}
#| fig-column: body-outset
#| out-width: 100%
ggmap(df, "poc", type = "point")
```

## Save the resulting dataset

```{r save}
save(df, file = file.path(data_dir, "04.all_data.Rdata"))
```
